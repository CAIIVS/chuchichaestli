# This workflow will build the package, and publish it on test-pypi and pypi (if tagged)
# https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

name: Release üêç üì¶ on PyPI

on:
  push:
    paths-ignore:
      - src/chuchichaestli/__about__.py


jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: |
        python3 -m pip install build --user
    - name: Build a binary wheel and a source tarball
      run: |
        python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/


  publish-to-pypi:
    name: Publish üêç üì¶ to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/chuchichaestli
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download üì¶
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Upload üì¶ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1


  github-release:
    name: |
      Sign the üêç üì¶ with Sigstore and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download üì¶
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign üì¶ with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: |-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |-
        gh release create '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: |-
        gh release upload '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'


  publish-to-testpypi:
    name: Publish üêç üì¶ to TestPyPI
    if: ${{ ! startsWith(github.ref, 'refs/tags/') && github.event.pull_request.merged == false }}
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/chuchichaestli

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download üì¶
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Upload üì¶ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        repository-url: https://test.pypi.org/legacy/


  version-bump-dev:
    name: Dev version bump ‚ÜóÔ∏è
    needs:
    - publish-to-testpypi
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN.
        token: ${{ secrets.READ_WRITE_PAT }}
    - name: Install hatch
      run: |
        python3 -m pip install hatch --user
    - name: Bump version
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@chuchichaestli.dev'
        VERSION=`hatch version`
        hatch version dev
        NEW_VERSION=`hatch version`
        git add src/chuchichaestli/__about__.py
        git commit -m "Bump version: $VERSION ‚Üí $NEW_VERSION"
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.READ_WRITE_PAT }}
        branch: version-bump
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        branch: version-bump
        title: 'Dev Version Bump'
        body: 'Automated dev version bump'
        base: main
        head: version-bump


  version-bump-release:
    name: Release version bump ‚¨ÜÔ∏è
    # Only run this job on the master branch
    if: github.ref == 'refs/heads/master'
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      if: github.event_name == 'pull_request'
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN.
        token: ${{ secrets.READ_WRITE_PAT }}
    - uses: actions/checkout@v4
      if: github.event_name == 'push'
      with:
        fetch-depth: 0
    - name: Install hatch
      run: |
        python3 -m pip install hatch --user
    - name: Bump version
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@chuchichaestli.dev'
        VERSION=`hatch version`
        hatch version micro
        NEW_VERSION=`hatch version`
        git add src/chuchichaestli/__about__.py
        git commit -m "Bump version: $VERSION ‚Üí $NEW_VERSION"
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.READ_WRITE_PAT }}
        branch: version-bump
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        branch: version-bump
        title: 'Release Version Bump'
        body: 'Automated version bump for release'
        base: main
        head: version-bump
